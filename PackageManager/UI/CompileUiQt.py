## Copyright 2015-2019 Ilgar Lunin, Pedro Cabrera

## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at

##     http://www.apache.org/licenses/LICENSE-2.0

## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.


import os
import subprocess
from PySide6 import QtCore, QtUiTools

CURRENT_DIR = os.path.dirname(__file__).replace('\\', '/') + '/'
INTERPRETER_PATH = 'python.exe'


def ui_to_py(ui_file):
    if not os.path.isfile(ui_file):
        msg = 'no such file'
        print(msg)
        return msg
    py_file_name = os.path.splitext(ui_file)[0] + '.py'

    loader = QtUiTools.QUiLoader()
    ui_file = QtCore.QFile(ui_file)
    ui_file.open(QtCore.QFile.ReadOnly)
    ui_widget = loader.load(ui_file)
    ui_file.close()

    with open(py_file_name, 'w') as py_file:
        py_file.write('# Auto-generated by PySide6-uic\n')
        py_file.write(f'from PySide6 import QtWidgets\n')
        py_file.write(f'from {ui_widget.metaObject().className()} import Ui_{ui_widget.metaObject().className()}\n\n')
        py_file.write(f'class {ui_widget.metaObject().className()}Window(QtWidgets.Q{ui_widget.windowFlags()}):\n')
        py_file.write(f'    def __init__(self):\n')
        py_file.write(f'        super().__init__()\n')
        py_file.write(f'        self.ui = Ui_{ui_widget.metaObject().className()}()\n')
        py_file.write(f'        self.ui.setupUi(self)\n')
        py_file.write(f'        self.setWindowTitle("{ui_widget.windowTitle()}")\n')
        py_file.write(f'        self.show()\n')

    bak_file_name = py_file_name.replace(".py", "_backup.py")

    # convert to cross-compatible code
    command = [INTERPRETER_PATH, '-m', 'Qt', '--convert', py_file_name]
    subprocess.call(command)

    if os.path.isfile(bak_file_name):
        os.remove(bak_file_name)
        print("REMOVING", bak_file_name)

    print('{0} converted to {1}.'.format(ui_file.upper(), py_file_name.upper()))


def compile():
    for d, dirs, files in os.walk(CURRENT_DIR):
        if "Python" in d or ".git" in d:
            continue
        for f in files:
            if "." in f:
                ext = f.split('.')[1]
                if ext == 'ui':
                    ui_file = os.path.join(d, f)
                    ui_to_py(ui_file)


if __name__ == '__main__':
    compile()
